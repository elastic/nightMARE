# Copyright Elasticsearch B.V. and/or licensed to Elasticsearch B.V. under one
# or more contributor license agreements. Licensed under the Elastic License;
# you may not use this file except in compliance with the Elastic License.

# coding: utf-8

from nightMARE.analysis import reversing


def decrypt_string(encrypted_bytes: bytes) -> bytes:
    """
    This function decrypts encrypted strings using the LATRODECTUS algorithm.

    :param encrypted_bytes: The encrypted string data as a byte sequence to decrypt.
    :return: The decrypted string as a byte sequence.
    """

    rz = reversing.Rizin.load(encrypted_bytes)
    x = rz.get_u32(0)
    y = rz.get_u16(4)

    byte_size = (x ^ y) & 0xFFFF
    decoded_bytes = bytearray(byte_size)

    for i, b in enumerate(rz.get_data(6, byte_size)):
        decoded_bytes[i] = ((x + i + 1) ^ b) % 256

    return bytes(decoded_bytes)
