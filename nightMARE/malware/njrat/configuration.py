import base64
import json

from nightMARE.analysis import reversing

from dnlib.DotNet import ModuleDefMD, MethodDef, TypeDef  # type: ignore
from dnlib.DotNet.Emit import OpCode, OpCodes  # type: ignore

TARGETED_FIELDS = {
    b"VR",
    b"VN",
    b"H",
    b"P",
    b"RG",
    b"sf",
}


class Configuration(object):
    """
    Represents a configuration object for njRAT malware configuration.
    """

    def __init__(self, config: list):
        """
        Initialize the Configuration object with a list of decrypted configuration values.

        :param config: A list of byte strings representing the raw configuration data.
        """

        self.c2 = config.get("H", "")
        self.version = config.get("VR", "")
        self.port = config.get("P", "")
        self.mutex = config.get("RG", "")
        self.persistence = config.get("sf", "")
        self.botnet = config.get("VN", "")

    def __repr__(self) -> str:
        """
        Provide a JSON string representation of the configuration.

        :return: A JSON-formatted string with decoded configuration fields.
        """

        return json.dumps(
            {
                "c2": self.c2,
                "version": self.version,
                "port": self.port,
                "mutex": self.mutex,
                "persistence": self.persistence,
                "botnet": self.botnet,
            }
        )


def retrieve_config(module: ModuleDefMD, targeted_fields: set) -> list[dict]:
    """
    Generates njRAT configuration based on field names then retrieving previous ldstr instruction
    containing configuration values.

    :param module: The dnlib module containing the njRAT binary.
    :param targeted_fields: A set of field names to target for configuration extraction.
    :return: A dictionary containing the configuration values.
    """

    field_values = reversing.Dnlib.get_static_field_info(module)
    targeted_field_info = reversing.Dnlib.get_targeted_field_info(
        field_values, TARGETED_FIELDS
    )

    if not targeted_field_info:
        raise RuntimeError("No targeted fields found in the provided module.")

    config = {}
    for field in targeted_field_info:
        ldstr_value = reversing.Dnlib.get_previous_ldstr_by_offset(
            field["method"], field["offset"]
        )
        if ldstr_value:
            key = field["field_name"].decode("utf-8")
            try:
                if key == "VN":
                    try:
                        ldstr_value = base64.b64decode(ldstr_value)
                    except Exception as e:
                        raise RuntimeError(f"Warning: Failed to base64 decode VN: {e}")
                value = ldstr_value.decode("utf-8")
            except Exception as e:
                raise RuntimeError(f"Warning: Failed to decode value for {key}: {e}")
            config[key] = value

    if not config:
        raise RuntimeError("No configuration could be extracted from targeted fields.")

    return config


def extract_configuration(binary: bytes) -> Configuration:
    """
    Extracts the configuration from a njRAT binary.

    :param binary: The binary data of the njRAT executable.
    :return: A Configuration object containing the extracted configuration.
    """
    module = reversing.Dnlib.load(binary)
    config_data = retrieve_config(module, TARGETED_FIELDS)

    return Configuration(config_data)
