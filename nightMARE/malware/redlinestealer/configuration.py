# coding: utf-8

import base64
import functools
import json

import dotnetfile

from nightMARE.core import bits
from nightMARE.analysis import reversing

CONFIGURATION_PATTERN = "72 ?? ?? ?? 70 80 ?? ?? ?? 04 72 ?? ?? ?? 70 80 ?? ?? ?? 04 72 ?? ?? ?? 70 80 ?? ?? ?? 04 72 ?? ?? ?? 70 80 ?? ?? ?? 04"

HOST_OFFSET = 1
ID_OFFSET = 11
XOR_KEY_OFFSET = 31
MESSAGE_OFFSET = 21


class Configuration(object):
    def __init__(self, host: bytes, id: bytes, message: bytes):
        tmp = host.split(b":")
        self.ip = tmp[0]
        self.port = int(tmp[1])
        self.id = id
        self.message = message

    def __repr__(self) -> str:
        return json.dumps(
            {
                "ip": self.ip.decode("utf-8"),
                "port": self.port,
                "id": self.id.decode("utf-8"),
                "message": self.message.decode("utf-8"),
            }
        )


def decrypt_string(key: bytes, encrypted_string: bytes) -> bytes:
    return base64.b64decode(bits.xor(base64.b64decode(encrypted_string), key.encode()))


def extract_configuration(binary: bytes) -> None:
    """
    Extracts configuration from a RedLine Stealer sample.


    :param data: The content of a RedLine Stealer sample.

    :return: The configuration extracted in a dictionary format of ip, id.
             None if extraction fails or encounters an exception.
    """

    f = functools.partial(get_string, binary, get_stream_data(binary, "#US"))
    configuration_offset = get_configuration_offset(binary)
    xor_key = f(configuration_offset + XOR_KEY_OFFSET)
    return Configuration(
        *(
            decrypt_string(xor_key, f(configuration_offset + x))
            for x in [HOST_OFFSET, ID_OFFSET, MESSAGE_OFFSET]
        )
    )


def get_configuration_offset(binary: bytes) -> int:
    r2 = reversing.Radare2.load(binary)
    return r2.find_pattern(
        CONFIGURATION_PATTERN, reversing.Radare2.PatternType.HEX_PATTERN
    )[0]["offset"]


def get_stream_data(binary: bytes, name: str) -> bytes:
    pe = dotnetfile.DotNetPE(binary)
    stream = pe.dotnet_stream_lookup[name]
    return pe.get_data(stream.address, stream.size)


def get_string(binary: bytes, stream: bytes, offset: int) -> bytes:
    r2 = reversing.Radare2.load(binary)
    return get_string_aux(stream, r2.get_u16(offset))


def get_string_aux(binary: bytes, offset: int) -> str:
    result = binary[offset + 1 :].split(b"\x00\x00")[0] + b"\x00"
    if result[0] == 0:
        return ""
    return result.decode("utf-16")
