# coding: "utf-8"


from nightMARE.analysis import reversing
from nightMARE.core import bits
from nightMARE.core.compression import lznt1

import nightMARE.malware.ghostpulse.payload_common as pc


TAG = 0xEA79A5C6
TAG_OFFSET = 4

IDAT_CHUNK_SIZE_OFFSET = -4
IDAT_TOTAL_SIZE_OFFSET = 12
IDAT_XOR_KEY_OFFSET = 8


def get_idat_offsets(binary: bytes) -> list[int]:
    return [
        x["offset"]
        for x in reversing.Radare2.load(binary).find_pattern(
            "IDAT", reversing.Radare2.PatternType.STRING_PATTERN
        )
    ]


def get_chunk_size(x: int) -> int:
    return (
        (((x >> 8) & 0xFF) << 16) + (((x >> 16) & 0xFF) << 8) + (x << 24) + (x >> 24)
    ) & 0xFFFFFFFF


def get_first_stage(binary: bytes) -> bytes | None:
    """
    Extracts the payload from the IDAT chunk of the PNG file.

    :param data: The PNG file data.
    :return: The decrypted payload or None.
    """
    r2 = reversing.Radare2.load(binary)
    tag_found = False
    encrypted_data = bytes()
    for idat_offset in get_idat_offsets(binary):
        if TAG == r2.get_u32(idat_offset + TAG_OFFSET):
            tag_found = True
            xor_key = r2.get_data(idat_offset + IDAT_XOR_KEY_OFFSET, 4)
            total_size = r2.get_u32(idat_offset + IDAT_TOTAL_SIZE_OFFSET) & 0xFFFFFFF0

        if not tag_found:
            continue

        chunk_size = get_chunk_size(r2.get_u32(idat_offset + IDAT_CHUNK_SIZE_OFFSET))
        chunk_size = (
            chunk_size
            if len(encrypted_data) + chunk_size < total_size
            else total_size - len(encrypted_data) + 16
        )
        encrypted_data += r2.get_data(idat_offset + 4, chunk_size)

    if not tag_found:
        return None
    return lznt1.decompress(bits.xor(encrypted_data[16:], xor_key) + b"\x00" * 0x100)


def extract_payload(binary: bytes) -> bytes:
    """
    Extracts payload from an encrypted file of ghostpulse.

    :param data: bytes of the encrypted file
    :return: payload bytes
    """

    if not (first_stage := get_first_stage(binary)):
        raise RuntimeError(
            "Failed to extract first stage, file does not appear to be GhostPulse file"
        )
    return pc.get_decrypted_payload(
        pc.get_third_stage(pc.get_second_stage(first_stage))
    )
