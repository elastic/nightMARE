import json

from nightMARE.analysis import reversing

from dnlib.DotNet import ModuleDefMD, MethodDef, TypeDef  # type: ignore
from dnlib.DotNet.Emit import OpCode, OpCodes  # type: ignore

TARGETED_FIELDS = {
    b"SmtpPort",
    b"SmtpServer",
    b"SmtpSender",
    b"SmtpPassword",
    b"SmtpReceiver",
    b"FtpHost",
    b"FtpUser",
    b"FtpPassword",
    b"TelegramApi",
    b"ChatId",
}


class Configuration(object):

    def __init__(self, config: dict):
        self.smtp_server = config.get("SmtpServer", "")
        self.smtp_port = config.get("SmtpPort", "")
        self.smtp_sender = config.get("SmtpSender", "")
        self.smtp_receiver = config.get("SmtpReceiver", "")
        self.smtp_password = config.get("SmtpPassword", "")
        self.ftp_host = config.get("FtpHost", "")
        self.ftp_user = config.get("FtpUser", "")
        self.ftp_password = config.get("FtpPassword", "")
        self.telegram_api = config.get("TelegramApi", "")
        self.chat_id = config.get("ChatId", "")

    def __repr__(self) -> str:
        """
        Provide a JSON string representation of the configuration.

        :return: A JSON-formatted string with decoded configuration fields.
        """
        config_dict = {
            "smtp_server": self.smtp_server,
            "smtp_port": self.smtp_port,
            "smtp_sender": self.smtp_sender,
            "smtp_receiver": self.smtp_receiver,
            "smtp_password": self.smtp_password,
            "ftp_host": self.ftp_host,
            "ftp_user": self.ftp_user,
            "ftp_password": self.ftp_password,
            "telegram_api": self.telegram_api,
            "chat_id": self.chat_id,
        }
        filtered = {k: v for k, v in config_dict.items() if v}
        return json.dumps(filtered, indent=4)


def get_targeted_field_info(field_info: list[dict]) -> list[dict]:
    """
    Filters the previously collected field information to only include those that match the targeted fields.

    :param field_info: A list of dictionaries containing field information.
    :return: A list of dictionaries containing information about targeted fields.
    """
    results = []
    for field in field_info:
        string = field["field_name"].encode("utf-8")
        if string in TARGETED_FIELDS:
            results.append(
                {
                    "method": field["method"],
                    "field_name": string,
                    "offset": field["offset"],
                }
            )

    if not results:
        raise RuntimeError("No targeted fields found in the provided module.")

    return results


def retrieve_config(module: ModuleDefMD, targeted_fields: set) -> list[dict]:
    """
    Generates Agent Tesla configuration based on field names then retrieving previous ldstr instruction
    containing configuration values.

    :param module: The dnlib module containing the Agent Tesla binary.
    :param targeted_fields: A set of field names to target for configuration extraction.
    :return: A dictionary containing the configuration values.
    """

    field_values = reversing.Dnlib.get_static_field_info(module)
    targeted_field_info = get_targeted_field_info(field_values)

    if not targeted_field_info:
        raise RuntimeError("No targeted fields found in the provided module.")

    config = {}
    for field in targeted_field_info:
        ldstr_value = reversing.Dnlib.get_previous_ldstr_by_offset(
            field["method"], field["offset"]
        )
        if ldstr_value:
            key = field["field_name"].decode("utf-8")
            value = ldstr_value.decode("utf-8")
            config[key] = value

    if not config:
        raise RuntimeError("No configuration could be extracted from targeted fields.")

    return config


def extract_configuration(binary: bytes) -> Configuration:
    """
    Extracts the final configuration from an Agent Tesla sample.

    :param binary: The binary data of the Agent Tesla sample.
    :return: An instance of the Configuration class containing the extracted configuration.
    """

    module = reversing.Dnlib.load(binary)
    config = retrieve_config(module, TARGETED_FIELDS)

    return Configuration(config)
